// <auto-generated />
using System;
using IndieVisible.Domain.Core.Enums;
using IndieVisible.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IndieVisible.Infra.Data.Migrations
{
    [DbContext(typeof(IndieVisibleContext))]
    [Migration("20190408010944_brainstorm")]
    partial class brainstorm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IndieVisible.Domain.Models.BrainstormComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AuthorName");

                    b.Property<string>("AuthorPicture");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("IdeaId");

                    b.Property<Guid?>("ParentCommentId");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.ToTable("BrainstormComments");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.BrainstormIdea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<Guid>("SessionId");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("BrainstormIdeas");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.BrainstormSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("TargetContextId");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("BrainstormSessions");

                    b.HasData(
                        new { Id = new Guid("1fee0e42-7cfb-4438-96f9-4dbee6019de9"), CreateDate = new DateTime(2019, 4, 7, 22, 9, 44, 87, DateTimeKind.Local), Description = "Ideas for improvement on the community.", Title = "IndieVisible Ideas", Type = 0, UserId = new Guid("00000000-0000-0000-0000-000000000000") }
                    );
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.BrainstormVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("IdeaId");

                    b.Property<Guid>("UserId");

                    b.Property<int>("VoteValue");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.ToTable("BrainstormVotes");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.FeaturedContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Introduction")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("UserContentId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("FeaturedContents");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("CoverImageUrl");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description");

                    b.Property<string>("DeveloperName");

                    b.Property<int>("Engine");

                    b.Property<string>("FacebookUrl");

                    b.Property<string>("GameDevNetUrl");

                    b.Property<string>("GameJoltUrl");

                    b.Property<int>("Genre");

                    b.Property<string>("IndieDbUrl");

                    b.Property<string>("InstagramUrl");

                    b.Property<string>("ItchIoUrl");

                    b.Property<int>("Language");

                    b.Property<string>("Platforms");

                    b.Property<DateTime?>("ReleaseDate");

                    b.Property<int>("Status");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("TwitterUrl");

                    b.Property<string>("UnityConnectUrl");

                    b.Property<string>("Url");

                    b.Property<Guid>("UserId");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.UserContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AuthorName");

                    b.Property<string>("AuthorPicture");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("FeaturedImage");

                    b.Property<Guid?>("GameId");

                    b.Property<string>("Introduction");

                    b.Property<int>("Language")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("UserContents");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.UserContentComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("AuthorName");

                    b.Property<string>("AuthorPicture");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("ParentCommentId");

                    b.Property<string>("Text");

                    b.Property<Guid>("UserContentId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserContentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.UserContentLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<Guid>("ContentId");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid?>("UserContentId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserContentId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.UserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentLanguages");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("UiLanguage");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("GameDevNetUrl");

                    b.Property<string>("GameJoltUrl");

                    b.Property<string>("IndieDbUrl");

                    b.Property<string>("ItchIoUrl");

                    b.Property<string>("Location");

                    b.Property<string>("Motto");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("StudioName");

                    b.Property<int>("Type");

                    b.Property<string>("UnityConnectUrl");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.BrainstormComment", b =>
                {
                    b.HasOne("IndieVisible.Domain.Models.BrainstormIdea", "Idea")
                        .WithMany("Comments")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.BrainstormIdea", b =>
                {
                    b.HasOne("IndieVisible.Domain.Models.BrainstormSession", "Session")
                        .WithMany("Ideas")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.BrainstormVote", b =>
                {
                    b.HasOne("IndieVisible.Domain.Models.BrainstormIdea", "Idea")
                        .WithMany("Votes")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.UserContent", b =>
                {
                    b.HasOne("IndieVisible.Domain.Models.Game", "Game")
                        .WithMany("UserContents")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.UserContentComment", b =>
                {
                    b.HasOne("IndieVisible.Domain.Models.UserContent")
                        .WithMany("Comments")
                        .HasForeignKey("UserContentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IndieVisible.Domain.Models.UserContentLike", b =>
                {
                    b.HasOne("IndieVisible.Domain.Models.UserContent")
                        .WithMany("Likes")
                        .HasForeignKey("UserContentId");
                });
#pragma warning restore 612, 618
        }
    }
}
